# --- PATCH for app/api/routes.py ---
# 1) Add imports at top:
# from fastapi import Body, Query
# from app.services.inventory import add_batch, Batch, get_stock, set_threshold, apply_sales_agg, reset_sales_cache
#
# 2) Add endpoints (place near other routers):

@router.post("/inventory/batch")
def inventory_add_batch(payload: dict = Body(...)):
    b = Batch(
        product_code=payload["product_code"],
        product_name=payload.get("product_name") or "",
        received_at=payload["received_at"],
        unit_cost=float(payload["unit_cost"]),
        qty_in=int(payload["qty_in"]),
        note=payload.get("note")
    )
    bid = add_batch(b)
    return {"ok": True, "batch_id": bid}

@router.get("/inventory/stock")
def inventory_stock():
    return get_stock()

@router.post("/inventory/threshold")
def inventory_threshold(payload: dict = Body(...)):
    set_threshold(payload["product_code"], int(payload.get("threshold") or 0), payload.get("preferred_name"))
    return {"ok": True}

@router.post("/inventory/recalc")
def inventory_recalc(lookback_days: int = Query(35, ge=1, le=365)):
    # TODO: implement using your Kaspi entries endpoints to derive qty_sold per product_code
    # For now it's a placeholder to be wired with your existing Kaspi client.
    return {"ok": True, "aggregated": {}}
